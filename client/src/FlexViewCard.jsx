import React from 'react';
import { useModelContext } from './contexts/ModelContext.jsx';
import FlexDataRenderer from './FlexDataRenderer.jsx';
import { useTranslation } from 'react-i18next';

/**
 * Renders a flexible data card, typically generated by the AI assistant.
 * It displays a set of fields for a single data record.
 * @param {object} props
 * @param {object} props.config - The configuration for the view.
 * @param {string} props.config.title - The title of the card.
 * @param {string} props.config.model - The name of the data model.
 * @param {string[]} props.config.fields - An array of field names to display.
 * @param {object} props.config.data - The data record to display.
 */
const FlexViewCard = ({ config }) => {
    const { t } = useTranslation();
    const { models } = useModelContext();
    const { title, model: modelName, fields: fieldNames, data } = config;

    const model = models.find(m => m.name === modelName);

    if (!model || !data) {
        return <div className="flex-view-card-error">{t('assistant.flexView.loadingError', 'Erreur de chargement de la vue.')}</div>;
    }

    const fieldsToDisplay = model.fields.filter(field => fieldNames.includes(field.name));

    return (
        <div className="flex-view-card">
            {title && <h4>{title}</h4>}
            <div className="data-card-content">
                {fieldsToDisplay.map(fieldDef => (
                    <div key={fieldDef.name} className="data-field-row">
                        <strong className="field-label" title={fieldDef.name}>{t(`field_${model.name}_${fieldDef.name}`, fieldDef.name)}:</strong>
                        <div className="field-value"><FlexDataRenderer value={data[fieldDef.name]} fieldDefinition={fieldDef} data={data} /></div>
                    </div>
                ))}
            </div>
        </div>
    );
};

export default FlexViewCard;